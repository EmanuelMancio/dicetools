"""
Receives a Gaussian's ".log" of a scan generated by plot_eff_tors and print the energy vs. torsional curve.

Author: Henrique Musseli Cezar
Date: APR/2018
"""

import argparse
import matplotlib as mpl
# Force matplotlib to not use any Xwindows backend.
# mpl.use('Agg')
import matplotlib.pyplot as plt

def parse_en_log_gaussian(fname):
  died = []
  ener = []
  with open(fname, 'r') as f:
    for line in f:
      if " dihedral =" in line:
        angle = line.split("=")[1].strip()

      if "SCF Done: " in line:
        # get energy and conver to kcal/mol
        en = float(line.split()[4])*627.509
        died.append(float(angle))
        ener.append(en)

  return sorted(died), [x for _,x in sorted(zip(died,ener))]

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Receives a Gaussians ".log" of a scan generated by plot_eff_tors and print the energy vs. torsional curve.')
  parser.add_argument("logfile", help="Gaussian's .log file")
  args = parser.parse_args()

  died, ener = parse_en_log_gaussian(args.logfile)

  # print to screen
  for ang, en in zip(died,ener):
    print("%f\t%f" % (ang, en))

  # plot it
  mpl.rcParams.update({'font.size':18, 'text.usetex':True, 'font.family':'serif', 'ytick.major.pad':4})

  plt.plot(died,ener)
  plt.xlim([-180,180])
  plt.xticks([-180,-120,-60,0,60,120,180])

  # some example options
  # plt.xlabel(r"$\phi$ ($^\circ$)")
  # plt.ylabel(r"Estimated effective torsional (kcal/mol)")
  # plt.xlim([-180.0,180.0])
  # plt.xticks([-180,-120,-60,0,60,120,180])

  plt.savefig("scan_gaussian.eps", bbox_inches='tight')