#!/usr/bin/env python3

"""
Script used to parse Gaussian09/16 partial charges determined via Mulliken, CHelp, CHelpG, HLY, MK or MKUFF to GROMACS topology file generated from LigParGen.

Author: Rafael Bicudo Ribeiro
Date: SET/2022
"""

import os
import sys
import argparse

def find_natoms(topfile):
	"""
	Return the number of atoms in the molecule.
	"""

	with open(topfile, "r") as f:
		var_bool = False
		words = []

		line = f.readline()
		while "[ atoms ]" not in line:
			line = f.readline()

		while "[ bonds ]" not in line:
			if line.strip().startswith(";") or len(line.strip()) == 0:
				line = f.readline()
			else:
				words = line.split()
				line = f.readline()

		return int(words[0])

def read_gaussian_charges(topfile, gaussianlogfile):
	"""
	Return a vector with Gaussian partial charges.
	"""

	natoms = find_natoms(topfile)

	qm_charges = []

	with open(gaussianlogfile, "r") as f:
		var_bool = False 
		i = 0

		for line in f:
			if line.find("ESP charges:") != -1:
				var_bool = True

			if var_bool and i in range(natoms+2):
				words = line.split()
				i = i + 1
				if len(words) > 2:
					qm_charges.append(round(float(words[2]), 4))

		var_bool = False

		return qm_charges

def read_mulliken_charges(topfile, gaussianlogfile):
	"""
	Return a vector with Gaussian partial charges determined via Mulliken population analysis.
	"""

	natoms = find_natoms(topfile)

	qm_charges = []

	with open(gaussianlogfile, "r") as f:
		var_bool = False
		i = 0

		for line in f:
			if line.find("Mulliken charges:") != -1:
				var_bool = True

			if var_bool and i in range(natoms+2):
				words = line.split()
				i = i + 1
				if len(words) > 2:
					qm_charges.append(round(float(words[2], 4)))

		var_bool = False

	return qm_charges

def correct_total_charge(qm_charges):
	"""
	Change the charge of the first atom to ensure quantum charges sum up to zero.
	"""

	sum = 0

	for i in qm_charges:
		sum = round(sum + i, 4)

	if sum == 0.0000:
		print("Total charge is zero.")
	else:
		qm_charges[0] = round(qm_charges[0] - sum, 4)
		print("Charge of first atom was increased by %s." % -sum)

	return qm_charges

def parse_charges(topfile, gaussianlogfile, method):
	"""
	Write the new parsed_* file with quantum mechanical charges.
	"""

	# Read the file and adjust the header accordingly

	fout = open("parsed_" + os.path.basename(topfile), "w")

	with open(topfile, 'r') as f:
		line = f.readline()
		while ";   nr" not in line:
			if "GENERATED BY LigParGen Server" in line:
				if "reordered by reordered_ligpargen" in line:
					line = "; GENERATED BY LigParGen Server, reordered by reordered_ligpargen and charge parsed by parse_gaussian_charges \n"
				else: 
					line = "; GENERATED BY LigParGen Server and charge parsed by parse_gaussian_charges \n"
			fout.write(line)
			line = f.readline()

		fout.write(line)
		line = f.readline()

	# Use the appropriate function to collect QM charges from each method

		ESP_methods = ['hly', 'chelpg', 'mk', 'chelp', 'mkuff', 'hlygat']
		if method.lower() in ESP_methods:
			qm_charges = read_gaussian_charges(topfile, gaussianlogfile)
		elif method.lower() == 'mulliken':
			qm_charges = read_mulliken_charges(topfile, gaussianlogfile)
		else:
			print('Charge population method not supported (try "python3 parse_gaussian_charges.py -h").')
			sys.exit(0)

	# Correct the total charge

		qm_charges = correct_total_charge(qm_charges)
		i = 0

	# Write the new .itp with QM charges

		while ("opls" in line) or ("ppg" in line) or line.strip().startswith(";"):
			if line.strip().startswith(";"):
				fout.write(line)
				f.readline()
				continue

			words = line.split()
			line = line.replace(words[6], str(qm_charges[i]))
			fout.write(line)
			line = f.readline()
			i = i + 1

		fout.write(line)
			
		for line in f:
			fout.write(line)

	print("The charges were sucessfully parsed.")

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="Recieves a GROMACS topology generated from LigParGen and Gaussian output file to parse QM partial charges.")
	parser.add_argument("topfile", help="the topology file (.top file) containing the molecule data for the OPLS-AA force field.")
	parser.add_argument("gaussianlogfile", help="the gaussian log file with partial charges.")
	parser.add_argument("--method", "-m", help="the method used to determine the charge populations (chelp, chelpg, mk, mkuff, hly or hlygat).")

	args = parser.parse_args()

	parse_charges(args.topfile, args.gaussianlogfile, args.method)
